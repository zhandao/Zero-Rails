module RspecGenerator
  module Normal
    def self.included(base)
      base.extend ClassMethods
    end

    # What is the meaning of normal spdoc?
    # Doesn't it seem to generate a lot of code?
    #   1. Allow you to first consider the test description that needs to be achieved.
    #   2. Splitting the work of test code also helps to reduce the pain.
    #   3. Gathering the description of the test code helps to quickly understand the test.
    #   4. You can even write it with the demand-side!
    module ClassMethods
      include Helpers
      include RspecGenerator::CommonHelpers

      def describe method = nil, add_desc = nil, desc: nil, template: nil, &block
        _biz add_desc, template: template, &block if action.nil?

        sub_content = _instance_eval(block) if block_given?

        content_stack.last << <<~DESCRIBE
          describe '#{desc}' do
            #{add_ind_to sub_content}
          end
        DESCRIBE
        content_stack.last << "\n"
      end

      def subject(what)
        #
      end

      def is(what)
        subject what
      end

      def biz_scenario desc = '', template: nil, &block
        _biz desc, template: template, &block
      end

      alias_method :biz, :biz_scenario

      def context when_what = '', &block
        sub_content = _instance_eval(block) if block_given?
        content_stack.last << <<~CONTEXT
          context '#{when_what}' do
            #{add_ind_to sub_content}
          end
        CONTEXT
        content_stack.last << "\n"
      end

      def request_by(merge = nil, params = { })
        content_stack.last << <<~REQ
          before { #{_request_by(merge, params)} }
        REQ
        content_stack.last << "\n"
      end
      alias_method :request, :request_by

      def it does_what = nil, when: nil, then: nil, its: nil, then_its: nil,
             is_expected: nil, isnt_expected: nil, should: nil, shouldnt: nil, **params, &block
        return oneline_it(binding.local_variable_get(:when), params) if does_what.nil?

        sub_content = _instance_eval(block) if block_given?
        what = is_expected || should
        not_what = isnt_expected || shouldnt
        err_msg = _error_info(what || not_what, :msg)
        # 如果 error msg 存在，则输出，且如果 desc 空，则不加逗号
        err_msg = err_msg != (what || not_what) ? "#{does_what.blank? ? '' : ', ' }#{err_msg}" : ''
        expects = _expect(binding.local_variable_get(:then), its || then_its, what, not_what)
        content_stack.last << <<~IT
          it '#{does_what}#{err_msg}' do
            #{_request_by(binding.local_variable_get(:when), params)}
        #{add_ind_to expects}
        #{add_ind_to sub_content}
          end
        IT
        content_stack.last << "\n"
      end

      def oneline_it(merge = nil, params = { })
        content_stack.last << <<~IT
          before { #{_request_by(merge, params)} }
          it { expect(json['code']).to eq 200 }
        IT
        # it { is_expected.to include('code' => 200) }
        content_stack.last << "\n"
      end

      def whole_file
        <<~OUTER
          # *** Generated by ZRO [ please make sure that you have checked this file ] ***

          RSpec.describe #{path.split('/').last.camelize} do
            #{add_ind_to content_stack.last}
          end
        OUTER
      end

      def inherited(base)
        super
        base.class_eval do
          self.ctrl_path = "#{name.sub('Spdoc', '').underscore.gsub('::', '/')}" if name.match? /sSpdoc/
          self.content_stack = [ ]
          content_stack.push ''
        end
      end
    end
  end
end
