module Generators::ApiDocSupport
  module DSL
    def self.included(base)
      base.extend Generators::ApiDocSupport::ClassMethods
    end
  end

  module ClassMethods
    include Generators::Helpers

    def api action, summary = '', http: nil, builder: nil, skip: [ ], use: [ ], &block
      super(action, summary, http: http, builder: builder, skip: skip, use: use, &block)
      (@api_actions ||= { })[action] = { skip: skip, use: use }
    end

    def g
      path = @_ctrl_path
      ctrl_path = "app/controllers/#{path}_controller.rb"
      spdoc_path = "app/_docs/rspec_docs/#{path.sub('api/', '')}_spdoc.rb"

      File.open(ctrl_path, 'w') { |file| file.write controller_rb.sub("\n\nend", "\nend") }
      puts "[Zero] Controller file has been generated: #{ctrl_path}"
      File.open(spdoc_path, 'w') { |file| file.write spdoc_rb }
      puts "[Zero] SpecDoc file has been generated: #{spdoc_path}"
    end

    def controller_rb
      <<~CTRL
        # *** Generated by Zero [ please make sure that you have checked this file ] ***

        class #{@_ctrl_path.camelize}Controller < Api::#{@_ctrl_path.split('/')[1].upcase}::BaseController
          include ActiveRecordErrorsRescuer
          #{add_ind_to skip_token}
          #{add_ind_to api_actions}
        end
      CTRL
    end

    def skip_token
      skip = @api_actions.clone.keep_if { |_key, info| info[:skip].include?('Token') }.keys
      return "XXX\n" if skip.blank?
      "skip_token only: #{pr(skip)}\n"
    end

    def api_actions
      @api_actions.keys.map do |action|
        model = @_ctrl_path.split('/').last.singularize.camelize
        impl = case action
          when :index   then "@data = #{model}"
          when :show    then "@datum = @#{model.underscore}"
          when :create  then "#{model}.create! permitted"
          when :update  then "#{model}.update! permitted"
          when :destroy then "@status = @#{model.underscore}.destroy"
          else '# TODO'
        end

        <<~ACTION
          def #{action}
            #{impl}
          end
        ACTION
      end.join("\n")
    end

    def describes
      @api_actions.keys.map do |action|
        <<~DESC
          describe :#{action} do
            # TODO
          end
        DESC
      end.join("\n")
    end

    def spdoc_rb
      <<~SPD
        # *** Generated by Zero [ please make sure that you have checked this file ] ***

        class #{@_ctrl_path.camelize}Spdoc < RequestSpdoc
          #{add_ind_to describes}
        end
      SPD
    end
  end
end
